-- MySQL Script generated by MySQL Workbench
-- Sat Jan 20 21:13:18 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema BD
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema BD
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `BD` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `BD` ;

-- -----------------------------------------------------
-- Table `BD`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`usuario` (
  `id_usuario` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `correo` VARCHAR(45) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido_p` VARCHAR(45) NOT NULL,
  `apellido_m` VARCHAR(45) NOT NULL,
  `contrasena` VARCHAR(60) NOT NULL,
  `tipo_usuario` VARCHAR(45) NOT NULL,
  `username` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id_usuario`),
  UNIQUE INDEX `correo_UNIQUE` (`correo` ASC) VISIBLE,
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`comentario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`comentario` (
  `id_comentario` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `id_usuario` INT UNSIGNED NOT NULL,
  `username` VARCHAR(100) NOT NULL,
  `comentario` VARCHAR(150) NOT NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `id_padre` INT NULL,
  PRIMARY KEY (`id_comentario`, `id_usuario`),
  INDEX `fk_comentario_usuario1_idx` (`id_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_comentario_usuario1`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `BD`.`usuario` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`curso` (
  `id_curso` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `informacion` VARCHAR(150) NULL DEFAULT NULL,
  `tipo` VARCHAR(45) NOT NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_curso`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`topico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`topico` (
  `id_topico` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id_topico`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`curso_topico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`curso_topico` (
  `id_curso` INT UNSIGNED NOT NULL,
  `id_topico` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_curso`, `id_topico`),
  INDEX `fk_id_curso_idx` (`id_curso` ASC) INVISIBLE,
  INDEX `fk_id_topico_idx` (`id_topico` ASC) VISIBLE,
  CONSTRAINT `fk_curso_topico_id_curso`
    FOREIGN KEY (`id_curso`)
    REFERENCES `BD`.`curso` (`id_curso`),
  CONSTRAINT `fk_curso_topico_id_topico`
    FOREIGN KEY (`id_topico`)
    REFERENCES `BD`.`topico` (`id_topico`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`profesor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`profesor` (
  `id_usuario` INT UNSIGNED NOT NULL,
  `admin` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`id_usuario`),
  INDEX `fk_id_usuario_idx` (`id_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_profesor_id_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `BD`.`usuario` (`id_usuario`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`ramo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`ramo` (
  `id_ramo` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `sigla` VARCHAR(45) NOT NULL,
  `departamento` VARCHAR(45) NOT NULL,
  `credito` VARCHAR(45) NOT NULL,
  `semestre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_ramo`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`ramo_topico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`ramo_topico` (
  `id_ramo` INT UNSIGNED NOT NULL,
  `id_topico` INT UNSIGNED NOT NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_ramo`, `id_topico`),
  INDEX `fk_id_ramo_idx` (`id_ramo` ASC) INVISIBLE,
  INDEX `fk_id_topico_idx` (`id_topico` ASC) VISIBLE,
  CONSTRAINT `fk_ramo_topico_id_ramo`
    FOREIGN KEY (`id_ramo`)
    REFERENCES `BD`.`ramo` (`id_ramo`),
  CONSTRAINT `fk_ramo_topico_id_topico`
    FOREIGN KEY (`id_topico`)
    REFERENCES `BD`.`topico` (`id_topico`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`ranking`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`ranking` (
  `id_usuario` INT UNSIGNED NOT NULL,
  `puntaje_p` INT UNSIGNED NOT NULL,
  `puntaje_ej` INT UNSIGNED NOT NULL,
  `activo` TINYINT NOT NULL,
  `date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_usuario`),
  INDEX `fk_id_usuario_idx` (`id_usuario` ASC) INVISIBLE,
  CONSTRAINT `fk_ranking_id_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `BD`.`usuario` (`id_usuario`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`usuario_curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`usuario_curso` (
  `id_usuario` INT UNSIGNED NOT NULL,
  `id_curso` INT UNSIGNED NOT NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_usuario`, `id_curso`),
  INDEX `fk_id_curso_idx` (`id_curso` ASC) INVISIBLE,
  INDEX `fk_id_usuario_idx` (`id_usuario` ASC) INVISIBLE,
  CONSTRAINT `fk_id_curso`
    FOREIGN KEY (`id_curso`)
    REFERENCES `BD`.`curso` (`id_curso`)
    ON UPDATE CASCADE,
  CONSTRAINT `fk_id_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `BD`.`usuario` (`id_usuario`)
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`usuario_empresa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`usuario_empresa` (
  `id_usuario` INT UNSIGNED NOT NULL,
  `rut` VARCHAR(45) NOT NULL,
  `estudio` VARCHAR(45) NOT NULL,
  `pais` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_usuario`),
  INDEX `fk_id_usuario_idx` (`id_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_usuario_empresa_id_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `BD`.`usuario` (`id_usuario`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`usuario_externo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`usuario_externo` (
  `id_usuario` INT UNSIGNED NOT NULL,
  `institucion` VARCHAR(200) NOT NULL,
  `nacimiento` DATE NOT NULL,
  PRIMARY KEY (`id_usuario`),
  INDEX `fk_id_usuario_idx` (`id_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_usuario_externo_id_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `BD`.`usuario` (`id_usuario`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`usuario_usm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`usuario_usm` (
  `id_usuario` INT UNSIGNED NOT NULL,
  `rol` VARCHAR(45) NOT NULL,
  `sede` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_usuario`),
  UNIQUE INDEX `rol_UNIQUE` (`rol` ASC) VISIBLE,
  INDEX `fk_id_usuario_idx` (`id_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_usuario_usm_id_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `BD`.`usuario` (`id_usuario`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `BD`.`log`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BD`.`log` (
  `id_log` INT NOT NULL AUTO_INCREMENT,
  `id_usuario` INT UNSIGNED NOT NULL,
  `comentario` VARCHAR(150) NOT NULL,
  `username` VARCHAR(100) NOT NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_log`, `id_usuario`),
  INDEX `fk_log_usuario1_idx` (`id_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_log_usuario1`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `BD`.`usuario` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `BD` ;

-- -----------------------------------------------------
-- procedure InsertUsuarioEmpresa
-- -----------------------------------------------------

DELIMITER $$
USE `BD`$$
CREATE PROCEDURE `InsertUsuarioEmpresa` (
	IN correo_usuario VARCHAR(100),
    IN nombre_usuario VARCHAR(45),
    IN apellido_p_usuario VARCHAR(45),
    IN apellido_m_usuario VARCHAR(45),
    IN contrasena_usuario VARCHAR(60),
    IN tipo_usuario_usuario VARCHAR(45),
    IN rut_usuario VARCHAR(45),
    IN estudio_usuario VARCHAR(45),
	IN pais_usuario VARCHAR(45),
	IN username_usuario VARCHAR(100)
)
BEGIN
	DECLARE last_inserted_id INT;
    
    INSERT INTO usuario (correo, nombre, apellido_p, apellido_m , contrasena, tipo_usuario,username) VALUES (correo_usuario, nombre_usuario, apellido_p_usuario, apellido_m_usuario , contrasena_usuario, "empresa", username_usuario);
    
    SET last_inserted_id = LAST_INSERT_ID();
    
    INSERT INTO usuario_empresa (id_usuario, rut, estudio, pais) VALUES ( last_inserted_id , rut_usuario, estudio_usuario, pais_usuario);
    
    INSERT INTO ranking (id_usuario, puntaje_p, puntaje_ej, activo) VALUES ( last_inserted_id , 0, 0, 1);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InsertUsuarioExterno
-- -----------------------------------------------------

DELIMITER $$
USE `BD`$$
CREATE PROCEDURE `InsertUsuarioExterno` (
	IN correo_usuario VARCHAR(100),
    IN nombre_usuario VARCHAR(45),
    IN apellido_p_usuario VARCHAR(45),
    IN apellido_m_usuario VARCHAR(45),
    IN contrasena_usuario VARCHAR(60),
    IN tipo_usuario_usuario VARCHAR(45),
    IN nacimiento_usuario DATE,
    IN institucion_usuario VARCHAR(200),
	IN username_usuario VARCHAR(100)
)
BEGIN
	DECLARE last_inserted_id INT;
    
    INSERT INTO usuario (correo, nombre, apellido_p, apellido_m , contrasena, tipo_usuario,username) VALUES (correo_usuario, nombre_usuario, apellido_p_usuario, apellido_m_usuario , contrasena_usuario, "externo", username_usuario);
    
    SET last_inserted_id = LAST_INSERT_ID();
    
    INSERT INTO usuario_externo (id_usuario, institucion, nacimiento) VALUES ( last_inserted_id , institucion_usuario, nacimiento_usuario);
    
    INSERT INTO ranking (id_usuario, puntaje_p, puntaje_ej, activo) VALUES ( last_inserted_id , 0, 0, 1);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InsertUsuarioProfe
-- -----------------------------------------------------

DELIMITER $$
USE `BD`$$
CREATE PROCEDURE `InsertUsuarioProfe` (
	IN correo_usuario VARCHAR(100),
    IN nombre_usuario VARCHAR(45),
    IN apellido_p_usuario VARCHAR(45),
    IN apellido_m_usuario VARCHAR(45),
    IN contrasena_usuario VARCHAR(60),
    IN tipo_usuario_usuario VARCHAR(45),
	IN username_usuario VARCHAR(100)
)
BEGIN
	DECLARE last_inserted_id INT;
    
    INSERT INTO usuario (correo, nombre, apellido_p, apellido_m , contrasena, tipo_usuario,username) VALUES (correo_usuario, nombre_usuario, apellido_p_usuario, apellido_m_usuario , contrasena_usuario, "profe", username_usuario);
    
    SET last_inserted_id = LAST_INSERT_ID();
    
    INSERT INTO profesor (id_usuario, admin) VALUES ( last_inserted_id , 0);
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InsertUsuarioUSM
-- -----------------------------------------------------

DELIMITER $$
USE `BD`$$
CREATE PROCEDURE `InsertUsuarioUSM` (
	IN correo_usuario VARCHAR(100),
    IN nombre_usuario VARCHAR(45),
    IN apellido_p_usuario VARCHAR(45),
    IN apellido_m_usuario VARCHAR(45),
    IN contrasena_usuario VARCHAR(60),
    IN tipo_usuario_usuario VARCHAR(45),
    IN rol_usuario VARCHAR(45),
    IN sede_usuario VARCHAR(50),
	IN username_usuario VARCHAR(100)
)
BEGIN
	DECLARE last_inserted_id INT;
    
    INSERT INTO usuario (correo, nombre, apellido_p, apellido_m , contrasena, tipo_usuario,username) VALUES (correo_usuario, nombre_usuario, apellido_p_usuario, apellido_m_usuario , contrasena_usuario, "usm", username_usuario);
    
    SET last_inserted_id = LAST_INSERT_ID();
    
    INSERT INTO usuario_usm (id_usuario, rol, sede) VALUES ( last_inserted_id , rol_usuario, sede_usuario);
    
    INSERT INTO ranking (id_usuario, puntaje_p, puntaje_ej, activo) VALUES ( last_inserted_id , 0, 0, 1);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SumarPuntaje
-- -----------------------------------------------------

DELIMITER $$
USE `BD`$$
CREATE PROCEDURE SumarPuntaje(
    IN id_usuario_puntaje INT,
    IN puntaje_agregado INT,
    IN puntaje_nombre VARCHAR(10) 
)
BEGIN
    DECLARE puntaje_p_actual INT;
    DECLARE puntaje_ej_actual INT;

    SELECT puntaje_p, puntaje_ej INTO puntaje_p_actual, puntaje_ej_actual
    FROM ranking WHERE id_usuario = id_usuario_puntaje;

    IF puntaje_nombre = 'puntaje_p' THEN
        UPDATE ranking
        SET puntaje_p = puntaje_p_actual + cantidad_agregado
        WHERE id_usuario = id_usuario_puntaje;
    ELSEIF campo_a_sumar = 'puntaje_ej' THEN
        UPDATE ranking
        SET puntaje_ej = puntaje_ej_actual + cantidad_agregado
        WHERE id_usuario = id_usuario_puntaje;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Eliminar_Usuario_USM
-- -----------------------------------------------------

DELIMITER $$
USE `BD`$$
CREATE PROCEDURE Eliminar_Usuario_USM(IN p_id INT)
BEGIN
    DECLARE exit_handler BOOLEAN DEFAULT FALSE;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET exit_handler = TRUE;

    START TRANSACTION;

    DELETE FROM log WHERE id_usuario = p_id;
    DELETE FROM comentario WHERE id_usuario = p_id;
    DELETE FROM ranking WHERE id_usuario = p_id;
    DELETE FROM usuario_usm WHERE id_usuario = p_id;

    DELETE FROM usuario WHERE id_usuario = p_id;

    IF exit_handler = FALSE THEN
        COMMIT;
    ELSE
        ROLLBACK;
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Error al eliminar el usuario y sus registros relacionados.';
    END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Eliminar_Usuario_Empresa
-- -----------------------------------------------------

DELIMITER $$
USE `BD`$$
CREATE PROCEDURE Eliminar_Usuario_Empresa(IN p_id INT)
BEGIN
    DECLARE exit_handler BOOLEAN DEFAULT FALSE;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET exit_handler = TRUE;

    START TRANSACTION;

    DELETE FROM log WHERE id_usuario = p_id ;

    DELETE FROM comentario WHERE id_usuario = p_id ;

    DELETE FROM ranking WHERE id_usuario = p_id ;

    DELETE FROM usuario_empresa WHERE id_usuario = p_id ;

    DELETE FROM usuario WHERE id_usuario = p_id ;

   IF exit_handler = FALSE THEN
        COMMIT;
    ELSE
        ROLLBACK;
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Error al eliminar el usuario y sus registros relacionados.';
    END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Eliminar_Usuario_Externo
-- -----------------------------------------------------

DELIMITER $$
USE `BD`$$
CREATE PROCEDURE Eliminar_Usuario_Externo(IN p_id INT)
BEGIN
    DECLARE exit_handler BOOLEAN DEFAULT FALSE;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET exit_handler = TRUE;

    START TRANSACTION;

    DELETE FROM log WHERE id_usuario = p_id;
    DELETE FROM comentario WHERE id_usuario = p_id;
    DELETE FROM ranking WHERE id_usuario = p_id;
    DELETE FROM usuario_externo WHERE id_usuario = p_id;

    DELETE FROM usuario WHERE id_usuario = p_id;

    IF exit_handler = FALSE THEN
        COMMIT;
    ELSE
        ROLLBACK;
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Error al eliminar el usuario y sus registros relacionados.';
    END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Eliminar_Usuario_Profe
-- -----------------------------------------------------

DELIMITER $$
USE `BD`$$
CREATE PROCEDURE Eliminar_Usuario_Profe(IN p_id INT)
BEGIN
    DECLARE exit_handler BOOLEAN DEFAULT FALSE;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET exit_handler = TRUE;

    START TRANSACTION;

    DELETE FROM log WHERE id_usuario = p_id;
    DELETE FROM comentario WHERE id_usuario = p_id;
    DELETE FROM profesor WHERE id_usuario = p_id;

    DELETE FROM usuario WHERE id_usuario = p_id;

    IF exit_handler = FALSE THEN
        COMMIT;
    ELSE
        ROLLBACK;
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Error al eliminar el usuario y sus registros relacionados.';
    END IF;
END;$$

DELIMITER ;
USE `BD`;

DELIMITER $$
USE `BD`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BD`.`usuario_AFTER_UPDATE` AFTER UPDATE ON `usuario` FOR EACH ROW
BEGIN
    UPDATE comentario
    SET username = NEW.username
    WHERE id_usuario = OLD.id_usuario;

    UPDATE log
    SET username = NEW.username
    WHERE id_usuario = OLD.id_usuario;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
